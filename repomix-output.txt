This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T06:35:51.488Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    globals.css
    layout.tsx
    page.tsx
  components/
    GoalAchievementApp.tsx
.gitignore
eslint.config.mjs
LICENSE
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.tsx
================
import './globals.css'
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Goal Achievement System',
  description: 'A system for achieving goals based on NCI methodology',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}

================
File: src/app/page.tsx
================
import GoalAchievementApp from '@/components/GoalAchievementApp'

export default function Home() {
  return (
    <main>
      <GoalAchievementApp />
    </main>
  )
}

================
File: src/components/GoalAchievementApp.tsx
================
"use client"

import React, { useState } from 'react';
import { PlusCircle, CheckCircle2, Target, Brain, Activity, Calendar } from 'lucide-react';

const TeachingTip = ({ title, content }: { title: string; content: string }) => (
  <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg mb-6 relative overflow-hidden animate-float font-display">
    <div className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-purple-500 to-blue-500 animate-shimmer"></div>
    <h3 className="text-lg font-semibold text-purple-800 dark:text-purple-200 mb-2">{title}</h3>
    <p className="text-sm text-purple-700 dark:text-purple-300 font-body">{content}</p>
  </div>
);

const StepContainer = ({ children }: { children: React.ReactNode }) => (
  <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm hover:shadow-xl transition-all duration-500 font-body">
    {children}
  </div>
);

const GoalAchievementApp = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [goalData, setGoalData] = useState({
    idealOutcome: '',
    leastDesiredOutcome: '',
    positiveHabits: [],
    negativeHabits: [],
    futureImage: '',
    futureLetters: '',
    dopamineMap: {
      current: [],
      desired: []
    }
  });

  const teachingTips = {
    1: {
      title: "The Power of Contrast",
      content: "Your brain needs contrast - the dream versus the nightmare. By vividly describing both outcomes, your mind starts to crave the ideal because staying the same becomes unbearable."
    },
    2: {
      title: "Connect With Your Future Self",
      content: "Most people don't prioritize their future selves because they can't visualize them. Creating a strong visual connection helps bridge this gap and makes your goals more emotionally compelling."
    },
    3: {
      title: "Habits Shape Your Future",
      content: "Remember: Goals are destinations, habits are the vehicle. Focus on building habits that make your goals a natural byproduct of who you're becoming."
    },
    4: {
      title: "The FEAR Formula",
      content: "Focus, Emotion, Agitation, and Repetition - these four elements help your mammalian brain embrace new patterns and make lasting changes."
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-purple-900 p-6">
      <style jsx global>{`
        @import url('https://fonts.googleapis.com/css2?family=Outfit:wght@300;400;500;600;700&family=Space+Grotesk:wght@300;400;500;600;700&display=swap');

        @keyframes float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-5px); }
        }
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
        .animate-float {
          animation: float 4s ease-in-out infinite;
        }
        .animate-shimmer {
          animation: shimmer 8s infinite;
        }
        .font-display {
          font-family: 'Space Grotesk', sans-serif;
        }
        .font-body {
          font-family: 'Outfit', sans-serif;
        }
      `}</style>

      <div className="max-w-6xl mx-auto">
        <h1 className="text-5xl font-bold text-center mb-8 text-purple-800 dark:text-purple-200 font-display bg-clip-text text-transparent bg-gradient-to-r from-purple-600 to-blue-600">
          Neurocognitive Goal Achievement
        </h1>

        <TeachingTip {...teachingTips[currentStep]} />

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          {['Set Your Outcomes', 'Future Self Vision', 'Build Habits', 'Track Progress'].map((title, index) => (
            <div
              key={index}
              className={`cursor-pointer rounded-lg p-4 transition-all duration-500 hover:shadow-lg transform hover:-translate-y-1 font-display ${
                currentStep === index + 1
                  ? 'bg-purple-100 dark:bg-purple-900 border-l-4 border-purple-500'
                  : 'bg-white dark:bg-gray-800'
              }`}
              onClick={() => setCurrentStep(index + 1)}
            >
              <h3 className={`font-medium ${
                currentStep === index + 1
                  ? 'text-purple-600 dark:text-purple-300'
                  : 'text-gray-700 dark:text-gray-300'
              }`}>
                {title}
              </h3>
            </div>
          ))}
        </div>

        {currentStep === 1 && (
          <StepContainer>
            <div className="space-y-6">
              <div>
                <label className="block text-lg font-display font-medium mb-2 text-purple-800 dark:text-purple-200">
                  Describe Your Ideal Future
                </label>
                <textarea
                  placeholder="Paint a vivid picture of your perfect outcome..."
                  value={goalData.idealOutcome}
                  onChange={(e) => setGoalData(prev => ({...prev, idealOutcome: e.target.value}))}
                  className="w-full h-32 p-4 rounded-lg border-2 border-purple-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-500 transition-all duration-300 font-body"
                />
              </div>
              <div>
                <label className="block text-lg font-display font-medium mb-2 text-purple-800 dark:text-purple-200">
                  Describe Your Nightmare Scenario
                </label>
                <textarea
                  placeholder="What happens if nothing changes..."
                  value={goalData.leastDesiredOutcome}
                  onChange={(e) => setGoalData(prev => ({...prev, leastDesiredOutcome: e.target.value}))}
                  className="w-full h-32 p-4 rounded-lg border-2 border-purple-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-500 transition-all duration-300 font-body"
                />
              </div>
            </div>
          </StepContainer>
        )}

        {currentStep === 2 && (
          <StepContainer>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <h3 className="text-xl font-display font-medium text-purple-800 dark:text-purple-200">Your Future Self</h3>
                <div className="aspect-square bg-gray-50 dark:bg-gray-700 rounded-lg border-2 border-dashed border-purple-300 hover:border-purple-500 transition-all duration-300 flex flex-col items-center justify-center p-4">
                  {goalData.futureImage ? (
                    <img 
                      src={goalData.futureImage} 
                      alt="Future self" 
                      className="w-full h-full object-cover rounded-lg"
                    />
                  ) : (
                    <>
                      <PlusCircle className="h-12 w-12 text-purple-400 mb-2" />
                      <p className="text-sm text-purple-600 dark:text-purple-300 text-center font-body">
                        Upload a visualization of your future self
                      </p>
                    </>
                  )}
                </div>
                <input
                  type="file"
                  accept="image/*"
                  className="hidden"
                  id="future-self-upload"
                  onChange={(e) => {
                    const file = e.target.files?.[0];
                    if (file) {
                      const reader = new FileReader();
                      reader.onload = (e) => {
                        setGoalData(prev => ({
                          ...prev,
                          futureImage: e.target?.result as string
                        }));
                      };
                      reader.readAsDataURL(file);
                    }
                  }}
                />
                <label
                  htmlFor="future-self-upload"
                  className="block w-full py-3 text-center border-2 border-purple-600 text-purple-600 rounded-lg hover:bg-purple-50 cursor-pointer transition-all duration-300 font-display"
                >
                  Upload Photo
                </label>
              </div>

              <div className="space-y-4">
                <h3 className="text-xl font-display font-medium text-purple-800 dark:text-purple-200">Letter to Future Self</h3>
                <textarea
                  placeholder="Dear Future Me..."
                  value={goalData.futureLetters}
                  onChange={(e) => setGoalData(prev => ({
                    ...prev,
                    futureLetters: e.target.value
                  }))}
                  className="w-full h-64 p-4 rounded-lg border-2 border-purple-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-500 transition-all duration-300 font-body"
                />
                <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg animate-float">
                  <p className="text-sm text-purple-700 dark:text-purple-300 font-body">
                    Write to your future self about your hopes, dreams, and the person you're committed to becoming.
                  </p>
                </div>
              </div>
            </div>
          </StepContainer>
        )}

        {currentStep === 3 && (
          <StepContainer>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <h3 className="text-xl font-display font-medium text-purple-800 dark:text-purple-200">Build Positive Habits</h3>
                <div className="space-y-3">
                  {goalData.positiveHabits.map((habit, index) => (
                    <div
                      key={index}
                      className="flex items-center gap-2 p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg animate-float"
                      style={{ animationDelay: `${index * 0.2}s` }}
                    >
                      <CheckCircle2 className="h-5 w-5 text-purple-500" />
                      <span className="font-body">{habit}</span>
                    </div>
                  ))}
                  <button 
                    onClick={() => {
                      const habit = prompt('Enter a positive habit:');
                      if (habit) {
                        setGoalData(prev => ({
                          ...prev,
                          positiveHabits: [...prev.positiveHabits, habit]
                        }));
                      }
                    }}
                    className="w-full py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-all duration-300 font-display"
                  >
                    Add Positive Habit
                  </button>
                </div>
              </div>

              <div className="space-y-4">
                <h3 className="text-xl font-display font-medium text-purple-800 dark:text-purple-200">Transform Negative Habits</h3>
                <div className="space-y-3">
                  {goalData.negativeHabits.map((habit, index) => (
                    <div
                      key={index}
                      className="flex items-center gap-2 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg animate-float"
                      style={{ animationDelay: `${index * 0.1}s` }}
                    >
                      <CheckCircle2 className="h-5 w-5 text-red-500" />
                      <span className="font-body">{habit}</span>
                    </div>
                  ))}
                  <button 
                    onClick={() => {
                      const habit = prompt('Enter a habit to change:');
                      if (habit) {
                        setGoalData(prev => ({
                          ...prev,
                          negativeHabits: [...prev.negativeHabits, habit]
                        }));
                      }
                    }}
                    className="w-full py-3 border-2 border-purple-600 text-purple-600 rounded-lg hover:bg-purple-50 transition-all duration-300 font-display"
                  >
                    Add Habit to Change
                  </button>
                </div>
              </div>
            </div>
          </StepContainer>
        )}

        {currentStep === 4 && (
          <StepContainer>
            <div className="space-y-6">
              <div>
                <div className="flex justify-between mb-2">
                  <span className="text-lg font-display font-medium text-purple-800 dark:text-purple-200">Overall Progress</span>
                  <span className="text-sm font-body text-purple-600 dark:text-purple-300">75%</span>
                </div>
                <div className="w-full h-2 bg-purple-100 rounded-full overflow-hidden">
                  <div 
                    className="h-full bg-purple-600 rounded-full transition-all duration-1000"
                    style={{ width: '75%' }}
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {[
                  { title: 'Habits Formed', value: '5/8', color: 'from-purple-500 to-blue-500' },
                  { title: 'Days Consistent', value: '24', color: 'from-blue-500 to-cyan-500' },
                  { title: 'Support Check-ins', value: '12', color: 'from-cyan-500 to-teal-500' }
                ].map((stat, index) => (
                  <div
                    key={index}
                    className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-xl transition-all duration-300 animate-float"
                    style={{ animationDelay: `${index * 0.2}s` }}
                  >
                    <div className="h-1 w-full bg-gradient-to-r rounded-full mb-4" style={{ backgroundImage: `linear-gradient(to right, ${stat.color})` }} />
                    <div className="text-sm text-gray-500 dark:text-gray-400 font-body">{stat.title}</div>
                    <div className="text-2xl font-bold mt-1 font-display bg-clip-text text-transparent bg-gradient-to-r ${stat.color}">{stat.value}</div>
                  </div>
                ))}
              </div>
            </div>
          </StepContainer>
        )}

        <div className="flex justify-between mt-8">
          <button
            className="px-6 py-3 rounded-lg bg-white dark:bg-gray-800 text-purple-600 font-display font-medium hover:shadow-lg transition-all duration-300 disabled:opacity-50"
            onClick={() => setCurrentStep(prev => Math.max(1, prev - 1))}
            disabled={currentStep === 1}
          >
            Previous
          </button>
          <button
            className="px-6 py-3 rounded-lg bg-purple-600 text-white font-display font-medium hover:shadow-lg hover:bg-purple-700 transition-all duration-300 disabled:opacity-50"
            onClick={() => setCurrentStep(prev => Math.min(4, prev + 1))}
            disabled={currentStep === 4}
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
};

export default GoalAchievementApp;

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.config({
    extends: ['next'],
    rules: {
      'react/no-unescaped-entities': 'off',
    },
  }),
]


export default eslintConfig;

================
File: LICENSE
================
MIT License

Copyright (c) 2025 Janell Smith

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "goal-achievement-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "lucide-react": "^0.263.1",
    "next": "15.1.6",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.1.6",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
